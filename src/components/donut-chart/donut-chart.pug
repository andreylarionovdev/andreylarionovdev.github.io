mixin donut-chart(options)
  -
    const {
      id,
      votes = [
        {
          label: 'perfect',
          count: 520
        },
        {
          label: 'good',
          count: 261
        },
        {
          label: 'satisfactorily',
          count: 260
        },
      ],
      gradientMap = {
        perfect: ['#FFE39C', '#FFBA9C'],
        good: ['#6FCF97', '#66D2EA'],
        satisfactorily: ['#BC9CFF', '#8BA4F9'],
        bad: ['#919191', '#3D4975'],
      },
      voteLabels = {
        perfect: 'Великолепно',
        good: 'Хорошо',
        satisfactorily: 'Удовлетворительно',
        bad: 'Разочарован',
      },
      width = 122,
      height = width,
      strokeWidth = 4,
    } = options || {};

  - const cx = width / 2;
  - const cy = width / 2;
  - const radius = cx - strokeWidth;
  - const circumreference = 2 * Math.PI * radius;

  - const sortedValues = votes.sort((a, b) => (b.count - a.count));
  - const total = sortedValues.reduce((acc, { count }) => acc + count, 0);

  - let angleOffset = 90;

  - const f = require('../../utils/functions');
  - const b = 'donut-chart';
  - const js = 'js';

  figure.donut-chart.js-donut-chart
    svg.donut-chart__chart(height=height width=width viewBox=[0, 0, width, height].join(' '))
      defs
        each grad, label in gradientMap
          linearGradient(id=label)
            stop(offset='0%' stop-color=grad[0])
            stop(offset='100%' stop-color=grad[1])
      each item in sortedValues
        - const label = item.label;
        - const strokeDashOffset = circumreference - (item.count / total) * circumreference;
        - const circleTransformValue = `rotate(${angleOffset}, ${cx}, ${cy})`;
        - angleOffset = (item.count / total) * 360 + angleOffset;
        g
          circle(
            class=f.bem({b, e: 'circle', m: label, js})
            cx=cx
            cy=cy
            r=radius
            fill='transparent'
            stroke=`url(#${label})`
            stroke-width=strokeWidth
            stroke-dasharray=circumreference - 2
            stroke-dashoffset=strokeDashOffset
            transform=circleTransformValue
          )
      g(class=f.bem({b, e: 'count', js}))
        text(class=f.bem({b, e: 'count-value', js}) x='50%' y='50%' text-anchor='middle')= total
        text.donut-chart__count-unit(x='50%' y='65%' text-anchor='middle')= 'голосов'

    ul.donut-chart__labels
      each label, key in voteLabels
        - const countSourceItem = sortedValues.find(obj => obj.label === key);
        - const count = countSourceItem !== undefined ? countSourceItem.count : '0';
        li(class=f.bem({b, e: 'label', m: key, js}) data-vote-key=key data-count=count)
          span.donut-chart__bullet
          span.donut-chart__caption= label